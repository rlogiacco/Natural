grammar org.agileware.natural.jbehave.Jbehave with org.agileware.natural.lang.Natural

generate model "http://www.agileware.org/natural/jbehave"

/**
 * 
 */
JbehaveDocument: {JbehaveDocument}
	story=Story?
;

/**
 * 
 */
Story: {Story}
	description=Paragraph?
	EOL
;

///**
// * 
// */
//JbehaveDocument: {JbehaveDocument}
//	EOL?
//	story=Story?
//;
//
///**
// * The story describes a feature via description, narrative and a set of scenarios
// * Story := Description? Meta? Narrative? GivenStories? Lifecycle? Scenario+ ;
// */
//Story: {Story}
//	description=Description?
//	meta=Meta?
//	narrative=StoryNarrative?
//	lifecycle=Lifecycle?
//	scenarios+=Scenario*
//;
//
//Description:
//	(TEXT_LITERAL TEXT_LITERAL* EOL?)+
//;
//
///**
// * The narrative is identified by keyword "Narrative:" (or equivalent in I18n-ed locale),
// * It is followed by the narrative elements
// * Narrative:= "Narrative:" ( InOrderTo AsA IWantTo | AsA IWantTo SoThat ) ;
// */
//StoryNarrative:
//	NarrativeA | NarrativeB
//;
//
//NarrativeA: {NarrativeA}
//	'Narrative:' EOL
//	inOrderTo=InOrderTo
//	asA=AsA
//	wantTo=IWantTo
//;
//
//NarrativeB: {NarrativeB}
//	'Narrative:' EOL
//	asA=AsA
//	wantTo=IWantTo
//	soThat=SoThat
//;
//
//// InOrderTo:= "In order to" NarrativeElementContent ;
//InOrderTo:
//	IN_ORDER_TO content=Text EOL
//;
//
//// AsA:= "As a" NarrativeElementContent ;
//AsA:
//	AS_A content=Text EOL
//;
//
//// IWantTo:= "I want to" NarrativeElementContent ;
//IWantTo:
//	I_WANT_TO content=Text EOL
//;
//
//// SoThat:= "So that" NarrativeElementContent ; 
//SoThat:
//	SO_THAT content=Text EOL
//;
//
//terminal IN_ORDER_TO: 'In order to';
//
//terminal AS_A: 'As a';
//
//terminal I_WANT_TO: 'I want to';
//
//terminal SO_THAT: 'So that';
//
//// The lifecycle is identified by keyword "Lifecycle:" (or equivalent in I18n-ed locale),
//// It is followed by the lifecycle elements
//// Lifecycle:= "Lifecycle:" LifecycleBefore? LifecycleAfter?
//Lifecycle: {Lifecycle} 
//	'Lifecycle:' EOL
//	before=LifecycleBefore?
//	after=LifecycleAfter?
//;
//
//// The before lifecyle element identified by keyword "Before:" (or equivalent in I18n-ed locale),
//// followed by one or more steps
//// LifecycleBefore:= "Before:" (Scope? Step+)+
//LifecycleBefore:
//	"Before:" EOL
//	elements+=LifecycleBeforeElement+
//;
//
//LifecycleBeforeElement:
//	scope=Scope EOL
//	steps+=Step+
//;
//
//// The after lifecyle element identified by keyword "After:" (or equivalent in I18n-ed locale),
//// followed by one or more sets of scope, outcome, meta filter and steps
//// LifecycleAfter:= "After:" (Scope? Outcome? MetaFilter? Step+)+
//LifecycleAfter:
//	"After:" EOL+
//	elements+=LifecycleAfterElement+
//;
//
//LifecycleAfterElement:
//	scope=Scope EOL
//	(outcome=Outcome EOL)?
//	steps+=Step+
//;
//
//// The scope element identified by keyword "Scope:" (or equivalent in I18n-ed locale),
//// Scope:= "Scope:" "STEP" | "SCENARIO" | "STORY"
//Scope:
//	"Scope:"
//	type=ScopeType
//;
//
//enum ScopeType: STEP
//	| SCENARIO
//	| STORY
//;
//
//// The outcome element identified by keyword "Outcome:" (or equivalent in I18n-ed locale),
//// Outcome:= "Outcome:" "ANY" | "SUCCESS" | "FAILURE" ;
//Outcome:
//	"Outcome:"
//	type=OutcomeType
//;
//
//enum OutcomeType: ANY
//	| SUCCESS
//	| FAILURE
//;
//
///**
// * The scenario is identified by keyword "Scenario:" (or equivalent in I18n-ed locale),
// * which is optional in the case of a single scenario.
// * It can optionally be followed by a title, which is expressed by any sequence of words
// * that must not contain any keywords at start of lines.
// * It is followed by one or more Steps.
// * Scenarios can optionally contain comments (which are not part of the scenarios) after examples using "!--" keyword
// * Scenario := "Scenario:"? Title? Meta? GivenStories? Step+ Examples? (Examples Comment+)? ;
// */
//Scenario:
//	'Scenario:' title=Text? EOL
//	meta=Meta?
//	given=GivenStories?
//	steps+=Step+
//	examples=Examples?
//;
//
///** 
// * The comma-separated list of story resources that specify the stories to be run before a story or a scenario
// * GivenStories:= "GivenStories:" (StoryPath ','?)+ ;
// */
//GivenStories: 
//	'GivenStories:'
//	resources+=FilePath
//	// TODO...
//	// (-> ',' EOL? resources+=FilePath)*
//	EOL
//;
//
///**
// * The examples table
// * Examples := "Examples:" ExamplesTable ;
// */
//Examples:
//	'Examples:' EOL+
//	table=Table
//;
//
///**
// * The scenario step is a step starting work followed by any number of characters
// * Step := StepStartingWord StepContent ;
// */
//Step: {Step}
//	keyword=STEP_KEYWORD
//	description=Text
//	(table=Table | code=DocString)?
//;
//
//terminal STEP_KEYWORD: ('Given' | 'When' | 'Then' | 'And' | 'But') (' ' | '\t')+;