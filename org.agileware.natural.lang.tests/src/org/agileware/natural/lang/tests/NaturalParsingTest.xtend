/*
 * generated by Xtext 2.23.0-SNAPSHOT
 */
package org.agileware.natural.lang.tests

import com.google.inject.Inject
import org.agileware.natural.lang.model.DocumentModel
import org.agileware.natural.testing.AbstractExamplesTest
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static org.hamcrest.MatcherAssert.*
import static org.hamcrest.Matchers.*
import org.agileware.natural.lang.serializer.DefaultDocumentModelSerializer

@RunWith(XtextRunner)
@InjectWith(NaturalInjectorProvider)
class NaturalParsingTest extends AbstractExamplesTest<DocumentModel> {

	@Inject DefaultDocumentModelSerializer serializer

	@Test
	def void singleSectionWithTitle() {

		val model = parse('''
			Section: Hello, Natural!
		''')

		assertThat(model, notNullValue())
		assertThat(validate(model), empty())

		assertThat(model.sections, hasSize(1))
		assertThat(model.sections.get(0).title, equalTo("Hello, Natural!"))
	}

	@Test
	def void singleSectionWithNarrative() {

		val model = parse('''
			Section:
				The quick brown fox
				Jumps over the lazy dog
		''')

		assertThat(model, notNullValue())
		assertThat(validate(model), empty())
		assertThat(model.sections, hasSize(1))

		val s1 = model.sections.get(0)
		assertThat(s1.title, nullValue())
		assertThat(s1.narrative, notNullValue())
		assertThat(s1.narrative.sections, hasSize(1))

		val narrative = serializer.serialize(s1.narrative.sections.get(0))
		assertThat(narrative, equalTo('''
			The quick brown fox
			Jumps over the lazy dog
		'''))
	}
	
	@Test
	def void multipleSectionsWithMetaTags() {
		val model = parse('''
			# language: en
			@title: Hello, Meta Tags!  
			
			Section: A
				The quick brown fox
				Jumps over the lazy dog
			
			@foo
			@bar
			Section: B
			
			@foo @bar
			
			Section: C
		''')
		
		assertThat(model, notNullValue())
		assertThat(validate(model), empty())
		assertThat(model.sections, hasSize(3))
		
		val a = model.sections.get(0)
		assertThat(a.meta.tags, hasSize(1))
		assertThat(a.meta.tags.get(0).id, equalTo("title"))
		assertThat(a.meta.tags.get(0).value, equalTo("Hello, Meta Tags!"))
		
		val b = model.sections.get(1)
		assertThat(b.meta.tags, hasSize(2))
		
		val c = model.sections.get(2)
		assertThat(c.meta.tags, hasSize(2))
	}
}
