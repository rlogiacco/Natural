/*
 * generated by Xtext
 */
package org.agileware.natural.jbehave.tests

import org.agileware.natural.jbehave.jbehave.Story
import org.agileware.natural.testing.AbstractParserTest
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static org.hamcrest.MatcherAssert.*
import static org.hamcrest.Matchers.*

@RunWith(XtextRunner)
@InjectWith(JbehaveInjectorProvider)
class JbehaveParsingTest extends AbstractParserTest<Story> {
	
	
	@Test
	def void narrativeTypeA() {
		val model = parse('''
			Narrative:
			In order to sell a pet
			As a store owner
			I want to add a new pet
		''')
		
		assertThat(model, notNullValue())
		assertThat(model.narrative, notNullValue())
	}
	
	@Test
	def void narrativeTypeB() {
		val model = parse('''
			Narrative:
			As a store owner
			I want to add a new pet
			So that the pet gets sold
		''')
		
		assertThat(model, notNullValue())
		assertThat(model, notNullValue())
	}
	
	@Test
	def void narrativeWithDescriptionAndMeta() {
		val model = parse('''
			The quick brown fox
			Jumps over the lazy dog
			
			Meta:
			@author: Mauro
			@themes UI Usability
			
			Narrative:
			In order to sell a pet
			As a store owner
			I want to add a new pet
		''')
		
		assertThat(model, notNullValue())
	}
	
	@Test
	def void scenario_01() {
		val model = parse('''
			Narrative:
			In order to sell a pet
			As a store owner
			I want to add a new pet
			
			Scenario: With a title
			Given a step
			And another step
		''')
		
		assertThat(model, notNullValue())
		assertThat(model.narrative, notNullValue())
		assertThat(model.scenarios, hasSize(1))
	}
	
	@Test
	def void simpleScenarios() {
		val model = parse('''
			Narrative:
			In order to communicate effectively to the business some functionality
			As a development team
			I want to use Behaviour-Driven Development
			
			Scenario: A scenario is a collection of executable steps of different type
			
			Given step represents a precondition to an event
			When step represents the occurrence of the event
			Then step represents the outcome of the event
			
			Scenario: Another scenario exploring different combination of events
			 
			Given a [precondition]
			When a negative event occurs
			Then the outcome should <be-captured>
			 
			Examples: 
			|precondition|be-captured|
			|abc|be captured    |
			|xyz|not be captured|
		''')
		
		assertThat(model, notNullValue())
		assertThat(model.narrative, notNullValue())
		assertThat(model.scenarios, hasSize(2))
	}
	
	@Test
	def void givenStories() {
		val model = parse('''
			Narrative:
			In order to sell a pet
			As a store owner
			I want to add a new pet
			
			Scenario: With a title
			
			GivenStories: /path/to/precondition1.story,
			              /path/to/precondition2.story
			              
			When step represents the occurrence of the event
			Then step represents the outcome of the event
		''')
		
		assertThat(model, notNullValue())
		assertThat(model.narrative, notNullValue())
		assertThat(model.scenarios, hasSize(1))
	}
}
