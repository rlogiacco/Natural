grammar org.agileware.natural.cucumber.Cucumber with org.agileware.natural.lang.Natural

generate model "http://www.agileware.org/natural/cucumber"

CucumberModel: {CucumberModel}
	EOL?
	feature=Feature?
;

/**
 * 
 */
Feature: {Section}
	meta=Meta?
	'Feature:' title=Text?
	(EOL narrative=Narrative)?
	scenarios+=AbstractScenario
	  (EOL scenarios+=AbstractScenario)*
;

/**
 * Base class for scenario section nodes. Each scenario node must define
 * the following structure at the least:
 * ```
 * meta=Meta?
 * 'Keyword:' title=Text?
 * (EOL narrative=Narrative)?
 * steps+=Step
 *   (EOL steps+=Step)*
 * ```
 */
AbstractScenario: Scenario
	| ScenarioOutline
	| Background
;


/**
 * 
 */
Background: {Section}
	meta=Meta?
	'Background:' title=Text?
	(EOL narrative=Narrative)?
	steps+=Step
	  (EOL steps+=Step)*
;

/**
 * 
 */
Scenario: {Section}
	meta=Meta?
	'Scenario:' title=Text?
	(EOL narrative=Narrative)?
	steps+=Step
	  (EOL steps+=Step)*
;

/**
 * 
 */
ScenarioOutline: {Section}
	meta=Meta?
	'Scenario' 'Outline' ':' title=Text?
	(EOL narrative=Narrative)?
	steps+=Step
	  (EOL steps+=Step)*
;

/**
 * 
 */
Step:
	keyword=STEP_KEYWORD
	description=Text
//	(table=Table | code=DocString)?
;

///**
// * 
// */
//Example:
//	tags+=Tag*
//	'Examples:' 
//	title=Title? EOL+
//	narrative=Narrative?
//	table=Table
//;

///**
// * 
// */
//DocString: {DocString}
//	('"""' EOL -> text=Text '"""')
//	// TODO alternate quote support in formatter
//	// | ("'''" EOL -> text=Text? "'''")
//	EOL*
//;
//
//Title:
//	(WORD | INT | STRING | PLACEHOLDER)
//	(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
//;
//
//Narrative:
//	(
//		(WORD | INT | STRING | PLACEHOLDER)
//		(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
//		EOL+
//	)+
//;
//
//StepDescription:
//	(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+
//;
//	
//Tag: id=TAGNAME EOL?;
//
//
//Text: {Text}
//	lines+=TextLine*
//;
//
//TextLine: {TextLine}
//	value=TEXT_VALUE EOL+
//;
//
//TEXT_VALUE returns ecore::EString:
//	TEXT_LITERAL TEXT_LITERAL*
//;
//
//TEXT_LITERAL: WORD
//	| INT
//	| STRING
//	| ANY_OTHER
//;
//
//terminal INT: 
//	'-'?
//	('0'..'9')+
//	('.' ('0'..'9')+)?
//;
//
//terminal LOCALE: 'en' 
//	| 'fr' 
//	| 'sp'
//	| 'it'
//;

terminal STEP_KEYWORD: ('Given' | 'When' | 'Then' | 'And' | 'But') (' ' | '\t')+;

//terminal PLACEHOLDER: '<' !('>' | ' ' | '\t' | '\n' | '\r')+ '>';
//	
//terminal TABLE_CELL: '|' !('|' | '\n' | '\r')*;
//
//terminal STRING:
//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"' | '\r' | '\n'))* '"' |
//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'" | '\r' | '\n'))* "'";
//
//terminal SL_COMMENT: '#' !('\n' | '\r')* NL;
//
//terminal TAGNAME: '@' !(' ' | '\t' | '\n' | '\r')+ ;
//
//terminal WORD: 
//	!('@' | '|' | ' ' | '\t' | '\n' | '\r')
//	!(' ' | '\t' | '\n' | '\r')*
//;
//
//terminal WS: (' ' | '\t');
//
//terminal EOL: NL;
//terminal fragment NL: ('\r'? '\n');
//
//terminal ANY_OTHER: .;
//
//// ----------------------------------------------------------
////
//// Unicode Ranges
////
//// ----------------------------------------------------------
//
//terminal fragment DIGIT: ASCII_DIGIT;
//
//terminal fragment LETTER: LATIN_ALPHABET;
//
//// Basic Latin
//////
//
//terminal fragment ASCII_SPACE: '\u0020';
//
//terminal fragment ASCII_DIGIT: ('\u0030'..'\u0039');
//
//// all ascii chars other than letters, digits, space, or control codes
//terminal fragment ASCII_SYMBOLS: ('\u0021'..'\u002F')
//	| ('\u003A'..'\u0040')
//	| ('\u005B'..'\u0060')
//	| ('\u007B'..'\u007E')
//;
//
//terminal fragment LATIN_ALPHABET: ('\u0041'..'\u005A')
//	| ('\u0061'..'\u007A')
//;
